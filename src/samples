import localForage from 'localforage'
import 'whatwg-fetch'

const CACHE_PREFIX = 'test_pokedex-'

const values = {}
values.protocol = 'https'
values.hostName = 'pokeapi.co'
values.versionPath = '/api/v2/'
values.offset = 0
values.limit = 100000
values.timeout = 20 * 1000 // 20 seconds
values.cache = true

function apiFetchJson (url) {
  return window.fetch(url)
    .then(response => response.json())
}

function loadUrl (url) {
  return new Promise((resolve, reject) => {
    let options = {
      baseURL: `${values.protocol}://${values.hostName}/`,
      timeout: values.timeout
    }
    axios.get(url, options)
      .then(response => {
        // if there was an error
        if (response.status >= 400) {
          reject(response)
        } else {
          // if everything was good
          // cache the object in browser memory
          // only if cache is true
          if (values.cache) {
            localForage.setItem(`${CACHE_PREFIX}${url}`, response.data)
          }
          resolve(response.data)
        }
      })
      .catch(err => { reject(err) })
  })
}

function getThrowCache (url, getfresh = false) {
  if (getfresh) {
    return new Promise((resolve, reject) => {
      loadUrl(url)
        .then(res => { resolve(res) })
        .catch(err => { reject(err) })
    })
  }

  return new Promise((resolve, reject) => {
    localForage.ready()
      .then(() => {
        localForage.getItem(`${CACHE_PREFIX}${url}`)
          .then(value => {
            if (value === null) {
              loadUrl(url)
                .then(res => { resolve(res) })
                .catch(err => { reject(err) })
            } else {
              resolve(value)
            }
          })
          .catch(error => {
            loadUrl(url)
              .then(res => { resolve(res) })
              .catch(err => { reject(err) })
          })
      })
      .catch(err => {
        loadUrl(url)
          .then(res => { resolve(res) })
          .catch(err => { reject(err) })
      })
  })
}
